from sys import argv
from RSA_Utils import RSA_Utils
from RSA_Core import RSA_Core


if __name__ == "__main__":
    # data = [b for b in RSA_Utils.read_bytes("wallpaper.jpg", 128)]
    # n = 457747559379881007880177720612923218990375958816522598537349946829849743309909575191622602158889766583486071100004057258762800479535860652440307328891039383845652037868921758927969948227669222472403716109982239461572655276007593913640534963366358865028472266597009204664035244836568840920789701338856443647857
    n = 927076919292742539725047268002239970753
    
    # data = RSA_Core.encrypt("test.txt", 128, n, 141035657062432050143574169234086502250431224465265109880515217549379685095351447296514724119862585044253628462013462471198674552521735555603242297002885187570998450897260522194132238538870661838086690460110144034598358861286883923652582846940937787505874680085910570045190209558897056517333498514304068791319)
    data = RSA_Core.encrypt("wallpaper.jpg", 16, n, 213130997973834353562750885649960535253)
    
    # print(data)
    print("")
    print("")
    print("")
    print("")
    print("")
    # res = RSA_Core.decrypt(data, 128, n, 99660230587129890281240970230250590589838857127252306279911062312989449362067153855630977057904499555402282289292455941744926319961154098719109328321868580229943964124778373290620465350600503542029121703489176354290364790893672128189058515236446716715707210162222320374793152162653808761692913566401425845159)
    res = RSA_Core.decrypt(data, 16, n, 320818547881474926932763392731461337213)
    
    # t = [i.to_bytes(128) for i in res]
    t = bytes(res)
    print(t)
    with open("out.jpg", "wb") as file:
        file.write(t)

    # print((97).to_bytes(128, 'big', signed=False))
    # argNum = len(argv) - 1  # liczba argumentów

    # if argNum < 2:
    #     print("Usage: python encrypt.py [N]")
    #     exit(1)

    # N = int(argv[1]) # liczba bajtów w bloku

    # if N % 2:
    #     print("Error: Bytes number must be a power of 2")
    #     exit(1)    

    # n, public, private = RSA_Core.keygen(N)
    # data = (n, public, private, N)

    # # print(data)
    # success = RSA_Core.serialize(data)

    # if success:
    #     print("Keys generated successfully")

    # # d = RSA_Core.deserialize()
    # # print(d)

    # exit(0)